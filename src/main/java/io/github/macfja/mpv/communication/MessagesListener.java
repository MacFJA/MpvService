package io.github.macfja.mpv.communication;

import com.alibaba.fastjson.JSONObject;
import io.github.macfja.mpv.communication.handling.HandlerAwareInterface;
import io.github.macfja.mpv.communication.handling.MessageHandlerInterface;
import org.slf4j.Logger;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * MessagesListener Class.
 * This class read all the output generated by MPV (in the IPC socket) and send it to each of its handler.
 *
 * @author MacFJA
 */
public class MessagesListener extends Thread implements HandlerAwareInterface {
    /**
     * The stream to read
     */
    private InputStream stream;
    /**
     * The application logger
     */
    private final Logger logger;
    /**
     * Indicate if the listener is running
     */
    private boolean running = false;
    /**
     * The list of all message handler
     */
    private List<MessageHandlerInterface> handlers = new ArrayList<>();

    /**
     * Indicate if the listener is running
     *
     * @return {@code true} if the listener is running, {@code false} otherwise.
     */
    public boolean isRunning() {
        return running;
    }

    @Override
    public void addMessageHandler(MessageHandlerInterface handlerInterface) {
        handlers.add(handlerInterface);
    }

    @Override
    public void removeMessageHandler(MessageHandlerInterface handlerInterface) {
        handlers.remove(handlerInterface);
    }

    @Override
    public List<MessageHandlerInterface> getMessageHandlers() {
        return handlers;
    }

    @Override
    public void clearMessageHandlers() {
        handlers.clear();
    }

    /**
     * Receive a (JSON) line from MPV IPC and search for handler(s) to process it
     *
     * @param line The received line in JSON format
     */
    public void handleLine(JSONObject line) {
        for (MessageHandlerInterface handler : handlers) {
            if (handler.canHandle(line)) {
                logger.debug("Handling: " + line.toJSONString() + " with: " + handler.toString());
                handler.handle(line);
            }
        }
    }

    @Override
    public void run() {
        running = true;
        Scanner sc = new Scanner(stream);

        while (sc.hasNextLine()) {
            final String line = sc.nextLine();
            logger.debug("Receive: " + line);
            if (line == null || !line.startsWith("{")) {
                logger.debug(" - Not a valid JSON");
                continue;
            }

            JSONObject object = JSONObject.parseObject(line);
            handleLine(object);
        }

        logger.info("The listener ended.");
        running = false;
    }

    /**
     * Start the listen with a stream.
     *
     * @param stream The stream input to read
     */
    public synchronized void start(InputStream stream) {
        this.stream = stream;
        super.start();
    }


    /**
     * Constructor.
     *
     * @param logger The logger to use
     */
    public MessagesListener(Logger logger) {
        super();
        this.logger = logger;
    }


    /**
     * Constructor.
     *
     * @param stream The InputStream to listen
     * @param logger The logger to use
     */
    public MessagesListener(InputStream stream, Logger logger) {
        super();
        this.stream = stream;
        this.logger = logger;
    }
}
